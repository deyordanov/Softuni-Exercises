/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public bool HasCycle(ListNode head) {
        if(head == null)
        {
            return false;
        }
        
        //If the fastPointer catches up with the slowPointer, them we have a cycle.
        ListNode slowPointer = head; // 1 step at a time
        ListNode fastPointer = head.next; // 2 steps at a time

        while(fastPointer != null && fastPointer.next != null)
        {
            slowPointer = slowPointer.next;
            fastPointer = fastPointer.next.next;

            if(slowPointer == fastPointer)
            {
                return true;
            }
        }

        return false;
    }
}