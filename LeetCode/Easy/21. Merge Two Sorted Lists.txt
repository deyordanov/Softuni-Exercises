/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int val=0, ListNode next=null) {
 *         this.val = val;
 *         this.next = next;
 *     }
 * }
 */
public class Solution {
    public ListNode MergeTwoLists(ListNode list1, ListNode list2) {
        if(list1 == null && list2 != null)
        {
            return list2;
        }
        else if(list1 != null && list2 == null)
        {
            return list1;
        }
        else if(list1 == null & list2 == null)
        {
            return null;
        }

        Queue<ListNode> queue = new Queue<ListNode>();
        while(list1 != null && list2 != null)
        {
            if(list1.val <= list2.val)
            {
                queue.Enqueue(new ListNode(list1.val));
                list1 = list1.next;
            }
            else
            {
                queue.Enqueue(new ListNode(list2.val));
                list2 = list2.next;
            }
        }

        while(list1 != null)
        {
            queue.Enqueue(new ListNode(list1.val));
            list1 = list1.next;
        }

        while(list2 != null)
        {
            queue.Enqueue(new ListNode(list2.val));
            list2 = list2.next;
        }

        ListNode head = queue.Dequeue();
        head.next = queue.Count >= 1 ? queue.Peek() : null;
        while(queue.Count != 0)
        {
            queue.Dequeue().next = queue.Count >= 1 ? queue.Peek() : null;
        }

        return head;
    }
}