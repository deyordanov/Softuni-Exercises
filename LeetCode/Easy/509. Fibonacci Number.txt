public class Solution {
  public int Fib(int n) {
    Dictionary < int, int > memoization = new Dictionary < int, int > ();

    return GetFibonacci(n, memoization);
  }

  int GetFibonacci(int fib, Dictionary < int, int > memo) {
    if (fib <= 1) {
      return fib;
    }

    int firstFib = 0;
    int secondFib = 0;
    if (memo.ContainsKey(fib - 1)) {
      firstFib = memo[fib - 1];
    } else {
      firstFib = GetFibonacci(fib - 1, memo);
      memo.Add(fib - 1, firstFib);
    }

    if (memo.ContainsKey(fib - 2)) {
      secondFib = memo[fib - 2];
    } else {
      secondFib = GetFibonacci(fib - 2, memo);
      memo.Add(fib - 2, secondFib);
    }

    return firstFib + secondFib;
  }
}